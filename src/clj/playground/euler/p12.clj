(ns playground.euler.p12
  (:require [clojure.math.numeric-tower :as math]))

(comment
  "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

   1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

   Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred divisors?")

(def triangular-numbers
  (lazy-seq (cons 1 (map + triangular-numbers (iterate inc 2)))))

(take 10 triangular-numbers)

(defn factor?
  "Is y a factor of x?"
  [x y]
  (zero? (rem x y)))

(defn prime-factorization
  "Prime factorization of a number"
  ([x] (prime-factorization 2 x))
  ([a b]
   (cond
     (= b 1) nil
     (factor? b a) (lazy-seq (cons a (prime-factorization a (/ b a))))
     :else (recur (inc a) b))))

;; http://stackoverflow.com/a/110365
(defn divisors-count
  "How many divisors does x have"
  [x]
  (->> (prime-factorization x)
       (frequencies)
       (vals)
       (map inc)
       (reduce *)))

(defn triangular-numbers-with-more-than-x-divisors
  [x]
  (drop-while #(< (divisors-count %) x) triangular-numbers))

(first (triangular-numbers-with-more-than-x-divisors 5))
(first (triangular-numbers-with-more-than-x-divisors 500))
